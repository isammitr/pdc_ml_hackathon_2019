{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the libraries\n",
    "\n",
    "#Importing global libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import json as js\n",
    "import sklearn as skl\n",
    "\n",
    "#Importing project libraries\n",
    "\n",
    "\n",
    "\n",
    "#Conversion of any categorical variables into numeric values    \n",
    "'''\n",
    "    #Function Name : Prepare_Model_data\n",
    "    #Input         : \n",
    "             Inputdataset        : The Name of the input dataset containing the information\n",
    "             Prediction_Variable : Variable Name that is to be predicted\n",
    "    #Output\n",
    "             Returns 2 Lists\n",
    "             List 1 : the list containing dependent variable values converted to numeric\n",
    "             List 2 : the list of values for the prediction variable\n",
    "             DependantVar_List\n",
    "             Prediction_List\n",
    "             \n",
    "             \n",
    "'''\n",
    "def Prepare_Model_data(InputDataSet,Prediction_Variable):\n",
    "    #InputDataSet = dataset\n",
    "    #Prediction_Variable=\"petition_is_victory\"\n",
    "\n",
    "    from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "    labelencoder = LabelEncoder()\n",
    "\n",
    "\n",
    "    for ColumnName in list(dataset):\n",
    "        if ColumnName not in (Prediction_Variable):\n",
    "            ColNameList.append(ColumnName)\n",
    "\n",
    "\n",
    "    DependantVar_ds = InputDataSet[ColNameList] \n",
    "    Prediction_ds = InputDataSet[Prediction_Variable] \n",
    "\n",
    "    DependantVar_List = InputDataSet[ColNameList].values \n",
    "    Prediction_List = InputDataSet[\"petition_is_victory\"].values \n",
    "    counter=0\n",
    "\n",
    "    for ColumnName in list(DependantVar_ds):\n",
    "        counter+=1\n",
    "        if DependantVar_ds[ColumnName].dtype == \"object\":\n",
    "            DependantVar_List[:, counter-1] = labelencoder.fit_transform(DependantVar_List[:, counter-1])\n",
    "\n",
    "    return DependantVar_List, Prediction_List\n",
    "    \n",
    "    \n",
    " \n",
    "#Gradient Boost Classifier\n",
    "\n",
    "\n",
    "def Run_Model(ModelName,fm_DependantVar_List,fm_PredictionVar_List,Predict_DependantVar_List):\n",
    "\n",
    "    if ModelName == \"Gradient Boost Classifier\":\n",
    "        from sklearn.ensemble import GradientBoostingClassifier\n",
    "        model= GradientBoostingClassifier(learning_rate=0.01,random_state=1)\n",
    "\n",
    "        model.fit(fm_DependantVar_List, fm_PredictionVar_List)\n",
    "\n",
    "        '''\n",
    "        gbc_train=model.score(X_train,y_train)\n",
    "        print(\"gbc_train=\",gbc_train)\n",
    "\n",
    "        gbc_test=model.score(X_test,y_test)\n",
    "        print(\"gbc_test=\",gbc_test)\n",
    "\n",
    "        accuracies_gboost= cross_val_score(estimator = model, X = X_train, y = y_train, cv = 10) \n",
    "        accuracies_gboost_mean=accuracies_gboost.mean()*100\n",
    "        print(\"Accuracy Gradient Boost=\",accuracies_gboost_mean)\n",
    "\n",
    "        accuracies_gboost_std=accuracies_gboost.std()*100\n",
    "        print(\"Standard Deviation Gradient Boost=\",accuracies_gboost_std)   \n",
    "        '''\n",
    "\n",
    "        Prediction_List = model.predict(Predict_DependantVar_List)\n",
    "        return Prediction_List\n",
    "    else:\n",
    "        print(\"Please pass a valid Model Name\")\n",
    "    \n",
    "#Prediction_List = Run_Model(\"Gradient Boost Classifier\",DependantVar_List,Prediction_List,DependantVar_List)   \n",
    "\n",
    "print(\"Perdicted : \", Prediction_List)\n",
    "print(\"Actual :\" ,Prediction_List)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
